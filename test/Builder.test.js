// const hre = require("hardhat");
const { expect } = require("chai");

const { Builder } = require("../scripts/patterns/builder");


describe("Test Builder", function () {

  // beforeEach(async () => {
  //   Create2 = await ethers.getContractFactory("Create2");
  //   create2 = await Create2.deploy();
  // })

  describe("Test general functionality", function () {
    it("Split number to bool", async () => {
      const {splitIntToBool, addCancelVote, addExecuteCancelVoteBatch, addExecuteVoteBatch} = require("../scripts/patterns/schemes");
      expect(splitIntToBool(0, 3)).to.deep.equal([false, false, false]);
       expect(splitIntToBool(1, 3)).to.deep.equal([true, false, false]);
      expect(splitIntToBool(2, 3)).to.deep.equal([false, true, false]);
      expect(splitIntToBool(3, 3)).to.deep.equal([true, true, false]);
      expect(splitIntToBool(4, 3)).to.deep.equal([false, false, true]);
      expect(splitIntToBool(5, 3)).to.deep.equal([true, false, true]);
      expect(splitIntToBool(6, 3)).to.deep.equal([false, true, true]);
      expect(splitIntToBool(7, 3)).to.deep.equal([true, true, true]);
    });
  });

  describe("Basic patterns", function () {
    it("Add delegate", async () => {
      let builder = new Builder();
      const {addDelegate} = require("../scripts/patterns/schemes");

      addDelegate(builder, 1, 0, true, false, true, true);
      expect(builder.getCalldata()).to.equal("0x04539062000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000090000000000b9db5f9b4617f949c3b593fba8e48fc74840fcb53b6839e00bf3a2000000000026d78eeca71471f1509c680b84945b9ae69d239cad8da2a0568e0f0000000000e7485b4281e0c6389fb464e8cf6add30efd0a37597f9d14fc29d020000000000d446edcdd6019922d8e077cd004aa1c22dcdcd2615b6f1881a2ef30000000000a4e2608fac2052026b995223dbd57d77eb6f41dbf5463fa4eb58940000000000cb4ec7bfc7f554d6a434dbcdf52d59918ceee1443213d48208d99500000000005bce3d41d0efd740d33c90fcc825bb4ddbca5153a5384d528f7e5a00000000000abd1df85f85ff3b14d9381b175de61a1e6e28ef082981053dff100000000000535b10439a52d997a67bc27ebdb667581652f1b31f70f0d9ea008c");

      builder = new Builder();
      addDelegate(builder, 0, 0, true, false, false, true);
      expect(builder.getCalldata()).to.equal("0x04539062000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000070000000000b9db5f9b4617f949c3b593fba8e48fc74840fcb53b6839e00bf3a2000000000026d78eeca71471f1509c680b84945b9ae69d239cad8da2a0568e0f0000000000f8febd0340903ec6038ceacaf36c5fbe8e85dc6346669bf969cea800000000009a84f293cf30cbecdacaa7e2b4095b1e09b2b2cff367b74bcf1ef10000000000eafc4ed392e16ea66c22ab0a2cdb33e85a501790f35dd756ace0c4000000000062701670ddae791c26ea9a65fbbf390105e4541d1778213364b375000000000098d6b2fda07c5d1062a26c829baced94f9bbee4d4bccf44f56ed99");

      builder = new Builder();
      addDelegate(builder, 0, 0, false, false, false, false);
      expect(builder.getCalldata()).to.equal("0x04539062000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000040000000000abec33efa7510756bb646bdbfd1ea2d8b5705208980530683a34860000000000704c09ff65112942848a63603bebd625aeb4a3e255cbd8b2472b900000000000bfdd5a0857c0acbdb9f763e78bb35cf39bd00797aa952405e5151f00000000004e3138b04d1858a7b490c049aace017b9f1bc5d3f9bf879adc1a73");

    });

    it("Add whitelist", async () => {
      let builder = new Builder();
      const {addWhiteList} = require("../scripts/patterns/schemes");
      
      addWhiteList(builder, 2, true);
      expect(builder.getCalldata()).to.equal("0x04539062000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000060000000000153270cc7db1f30be2ad8d3ffc9578b26f04931643873dc437f7ef0000000000c1f53d499e0a453a49336f1a2f534fdd88fc67d9b72efb0a46d08b000000000017702179bcda4ff411f929e18f10d3f05c839796727d53d1b56f1e0000000000092c21165d4825b5ec1dfb4753e86a9b43c359309ab19f94ebf4be00000000009f793d532b970bb55a030b78834783e0b8d5bd2e295f8d37fe028300000000004f7f79d534585ace63981ef12053a26ad99dba3e267a4c4ecedf82");

      builder = new Builder();
      addWhiteList(builder, 1, false);
      expect(builder.getCalldata()).to.equal("0x04539062000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000040000000000cf56c8cff78b00ca7795d4f97c2a351ecedf3cc52e1df77cd5a3750000000000b1e14e7db6391733d3007d0b1397090d66f518acbc74aa35025a87000000000084f3f57613bf3ded0af136455cf693aaa1bc02d96b11e00509d3eb0000000000d3fd4c540f2928e12205c1c35f1353eabe5cce9c9f3a155c3fec7b");

      builder = new Builder();
      addWhiteList(builder, 0, false);
      expect(builder.getCalldata()).to.equal("0x04539062000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000020000000000cf56c8cff78b00ca7795d4f97c2a351ecedf3cc52e1df77cd5a3750000000000945d04e81eddbfaaaf23bf26e0c4251cf4cf4ec11ce8617132a33d");

      builder = new Builder();
      addWhiteList(builder, 0, true);
      expect(builder.getCalldata()).to.equal("0x04539062000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000030000000000153270cc7db1f30be2ad8d3ffc9578b26f04931643873dc437f7ef0000000000c1f53d499e0a453a49336f1a2f534fdd88fc67d9b72efb0a46d08b000000000004f877bfe1643146c85d913e8ef85381d12ed25b7742b99cfbffa9");
    });

    it("Add createMultiplierNft", async () => {
      let builder = new Builder();
      const {addModifyMultiplierNfts} = require("../scripts/patterns/schemes");
      
      addModifyMultiplierNfts(builder, 0, 3, false);
      expect(builder.getCalldata()).to.equal("0x04539062000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000040000000000581732187b993bf28f5054977032dc5267c0e0fd831c47d6e5e87e00000000000fe1340cdac03ee8fbd6fce1a69b336ad4cfc6d2e5018ad763a7ef0000000000fb2f28f623242959960990688cba5113dd44081a9c78c6ce47ace90000000000cda6830ba59f34e24bcc14ff8c4105c07d9b75e4e5acafc8f5ff20");

      builder = new Builder();
      addModifyMultiplierNfts(builder, 0, 2, false);
      expect(builder.getCalldata()).to.equal("0x04539062000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000030000000000581732187b993bf28f5054977032dc5267c0e0fd831c47d6e5e87e00000000000fe1340cdac03ee8fbd6fce1a69b336ad4cfc6d2e5018ad763a7ef0000000000bd0d88c85c4cbe8ebb674ec2b023c70550f6bb98c9767697aa1746");

      builder = new Builder();
      addModifyMultiplierNfts(builder, 0, 1, true);
      expect(builder.getCalldata()).to.equal("0x04539062000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000030000000000153270cc7db1f30be2ad8d3ffc9578b26f04931643873dc437f7ef00000000009e75a8b9f1cc4083384383017838cb3bd7737ff831c58447abf92a0000000000399ede2ff6a3b56be2f5137e7143f0f4d7186b96cf4c5292bb27be");
    });

    it("Add cancelVote", async () => {
      let builder = new Builder();
      const {addCancelVote} = require("../scripts/patterns/schemes");
      
      addCancelVote(builder, 0, false, true);
      expect(builder.getCalldata()).to.equal("0x04539062000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000030000000000cc44559ffc75419bfe1f209d071fc0e485649db4bcf697ae4fe8ba00000000009d3c241a4393a17555cea753a272491ccfdfcc97db0dd490f936a1000000000001c040e559554f6ec5d86f2fdcd93e9250dcb6b8d8207cbfab72da");

      builder = new Builder();
      addCancelVote(builder, 0, true, false);
      expect(builder.getCalldata()).to.equal("0x04539062000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000030000000000c4ac3c16affbcac6702e21612bc1db62a1cf2ed59d0114301a669100000000008232d84431ab8fc318ebb759ded6420aa12bde6a20a7541a60ec9e0000000000d4189f10926ae52cec6b667cc354d55c407205d81ddc153c2a1c11");
    });

    it("Add deposit", async () => {
      let builder = new Builder();
      const {addDeposit} = require("../scripts/patterns/schemes");
      
      addDeposit(builder, true, false);
      expect(builder.getCalldata()).to.equal("0x045390620000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000007442a19d4480a6b4dae0403a94d970b973cd7597bbce6256d7b5ef0000000000403b01b6b672635387b97d76161c5ecf50c5f2891bf0d964b9b53e");

      builder = new Builder();
      addDeposit(builder, false, true);
      expect(builder.getCalldata()).to.equal("0x04539062000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000020000000000e7d9326b8e5c118d9d3220bc15654aa97c313712a619ff0356ee7700000000006f596a72934a9835e620d4e8a1d25d9fb5629903e25d6f89cac489");
    });

    it("Add Multicall Vote", async () => {
      let builder = new Builder();
      const {addMulticallVote} = require("../scripts/patterns/schemes");
      
      addMulticallVote(builder, [], [], [0, true, true, false]);
      expect(builder.getCalldata()).to.equal("0x04539062000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000050000000000d96bb5e035054be4d19e92ad7b099f210d5b4b03a04337e515ac4c00000000003b0bb3c536536373c12c89e278fb621d8fe3e7ed947361d609684c00000000006dbd5e772b7632047297cd8e81f0a750422f7a5c55ccb7bc05d83d0000000000a28a14c4ea954c2c72837c23d5b935a223c4d4eb4c5dd6ae6ae89a000000000045ca0a63b1bc5eb3bd494958b015f0e24c12bf53775322559edb80");

      builder = new Builder();
      addMulticallVote(
        builder, 
        [], // number of unlockTokens, ifUpdateMax, ifUnlocksLastToken, !!!  ALWAYS UPDATES MAX
        [], // if tokens depositde, if nfts deposited
        [1, true, true, false] // number of unlock tokens, if updates max, if tokenLocked, if nfts locked
      );
      expect(builder.getCalldata()).to.equal("0x04539062000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000060000000000eac551ded6900963a9d23df844f4d1971c2ec26faaf71b4dadba580000000000c340a1227b0294d35fdf15c3e193663b02b4b4e37e647112ad327e000000000034a2d37271e556d25f4af4e82d795a1946a5fdc905b2e69a6b44450000000000301c613deee1341e728a9ade3363494c6afcadd10f8988d880a8220000000000e3a88428b105b9225e9476077b523c5b6c9f831c85efe166a386b100000000001af9573c7eff00b965de34ddfd62e3446926f7ff4d1a384456ab46");

      builder = new Builder();
      addMulticallVote(
        builder, 
        [], // number of unlockTokens, ifUpdateMax, ifUnlocksLastToken, !!!  ALWAYS UPDATES MAX
        [true, false], // if tokens depositde, if nfts deposited
        [0, true, true] // number of unlock tokens, if updates max, if tokenLocked, if nfts locked
      );
      expect(builder.getCalldata()).to.equal("0x04539062000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000070000000000b9db5f9b4617f949c3b593fba8e48fc74840fcb53b6839e00bf3a2000000000026d78eeca71471f1509c680b84945b9ae69d239cad8da2a0568e0f0000000000cb3bdd7e1049cc9a9617163ae358c693d691b458a46c158b674bd80000000000ebed04769901befd1510350f87dd62816742f27886f420592bb63d0000000000ed30a3db3ba33792fdb05a94c13f7506dfe87916e40188d3908c470000000000a2b2ed05efd844acae5dea93274b9d4af2147085ea8570d54644ab0000000000554df4d1aba0c98665ed37b869eef753b2eecc53e034d6fadcac3a");

      builder = new Builder();
      addMulticallVote(
        builder, 
        [], // number of unlockTokens, ifUpdateMax, ifUnlocksLastToken, !!!  ALWAYS UPDATES MAX
        [], // if tokens depositde, if nfts deposited
        [0, true, false, false] // number of unlock tokens, if updates max, if tokenLocked, if nfts locked
      );
      expect(builder.getCalldata()).to.equal("0x04539062000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000040000000000d96bb5e035054be4d19e92ad7b099f210d5b4b03a04337e515ac4c00000000003b0bb3c536536373c12c89e278fb621d8fe3e7ed947361d609684c00000000009bfaddf2a399b761d1c1f13cf4d507f31eb110603e53644d7cc51000000000000295dd60d60d71575e79895e325e076eb59826d83c2a5298727661");

      builder = new Builder();
      addMulticallVote(
        builder, 
        [], // number of unlockTokens, ifUpdateMax, ifUnlocksLastToken, !!!  ALWAYS UPDATES MAX
        [], // if tokens depositde, if nfts deposited
        [0, false, true, false] // number of unlock tokens, if updates max, if tokenLocked, if nfts locked
      );
      expect(builder.getCalldata()).to.equal("0x0453906200000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000004000000000043a42e170ae91f776f020de810ef4f9b3832023cde24fbcbd7f9a200000000004c1775acd84cac7ed57c11662570ad7b17bee192f8c07d9d0b9ad7000000000078b7e50d6f222cac9a80f332ada163c794d804f46dcddcf8fd996400000000009e416e645d8bbbb22e6ced1ef0b07122c2caf66ac6ea8aaa1ac121");

      builder = new Builder();
      addMulticallVote(
        builder, 
        [], // number of unlockTokens, ifUpdateMax, ifUnlocksLastToken, !!!  ALWAYS UPDATES MAX
        [], // if tokens depositde, if nfts deposited
        [2, true, true, false] // number of unlock tokens, if updates max, if tokenLocked, if nfts locked
      );
      expect(builder.getCalldata()).to.equal("0x04539062000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000070000000000eac551ded6900963a9d23df844f4d1971c2ec26faaf71b4dadba580000000000656742b88d5b0da691a53c1c26248aaae0a7c8b77c0d3cc4990a4b0000000000d28143f2c43b227924b3939a1d2a789cdb8634940a944d56804e520000000000565706a4c8d1d4be417fdd09177a354796cc21baba266cb262e8b0000000000066378090b68db9aac10fd05a937f61827ed8ac1ec6fb7e6447d5b60000000000ca2d1cef9124741175da2d68eaf6eb46b4e41ddd9f3c269ab4b2a60000000000f6a2b1a8ae6974382ae257321a049b84523910a84743f06e910b16");

      builder = new Builder();
      addMulticallVote(
        builder, 
        [], // number of unlockTokens, ifUpdateMax, ifUnlocksLastToken, !!!  ALWAYS UPDATES MAX
        [true, false], // if tokens depositde, if nfts deposited
        [1, true, true, false] // number of unlock tokens, if updates max, if tokenLocked, if nfts locked
      );
      expect(builder.getCalldata()).to.equal("0x04539062000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000080000000000b9db5f9b4617f949c3b593fba8e48fc74840fcb53b6839e00bf3a2000000000026d78eeca71471f1509c680b84945b9ae69d239cad8da2a0568e0f0000000000f9314b36d9c68fcebce7779a6a6561b4c58eb7355020352704835f00000000000cf2a60ec4f2f7d97114f3406fa60c4d92552f75bee1390ec476410000000000a5725270a6f09eb3184e39f47b6769569f4b1cc7a97e0d4e1c328300000000007b4dc1527d297377fa53f700597b8fc3050e2fd33b8c5573d448390000000000e89af51693643aa9c628faf54dae8d4b0c6a56619f742037b202460000000000e01d0057043bc1e8299cd3d42187a8617481597f05f76b0f61f0f8");

      builder = new Builder();
      addMulticallVote(
        builder, 
        [0, false, true], // number of unlockTokens, ifUpdateMax, ifUnlocksLastToken, !!!  ALWAYS UPDATES MAX
        [], // if tokens depositde, if nfts deposited
        [0, true, true, false] // number of unlock tokens, if updates max, if tokenLocked, if nfts locked
      );
      expect(builder.getCalldata()).to.equal("0x04539062000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000080000000000f754e17f810c6384c1c484aabad4d7a14fc374439a93c37dca740700000000003a88ece81a466da8aa7a551c9fecd77a1b760fae8141ab87619bc90000000000b662ab00c6c22024ad34f0b81f698b827278908550e6b0fae33589000000000095ad9962111d57a63a032bac3afed9d2ae7984c1707f7179f4813400000000007e959526e1c85437dc17c93025cfae0f586c5bd82b742b54d392170000000000ca1f8fb672fbb3db8075f459236887b7613a1694593819ceb1d0b40000000000dbc7d0171f72544b6d8796c5a8ee715e914c22505de8785e951c2d0000000000d50f8f02f258f685ef24345fe0cde9a15d4cd9e6724f0b0561cfea");

      builder = new Builder();
      addMulticallVote(
        builder, 
        [0, true, false], // number of unlockTokens, ifUpdateMax, ifUnlocksLastToken, !!!  ALWAYS UPDATES MAX
        [], // if tokens depositde, if nfts deposited
        [0, true, false, false] // number of unlock tokens, if updates max, if tokenLocked, if nfts locked
      );
      expect(builder.getCalldata()).to.equal("0x045390620000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000700000000003f44ff966e4dac59caccd48e1b955073f81e54ceb1f5fb7d5c47c50000000000c5cab2380360e30af686273d9140ca1a6f7e5e16218404282a4bf4000000000012f4ed39138465b2ea55b0b8a83f709db1795f63a6ed40fa2af4fc000000000068cf10d500736a3df7f8e4fcd5c9749fc5319b3ee24a6665e96fce000000000031f806c15945a622124328167704047bf40304d4d205e45e90752e0000000000c0bb53227e0503c894c6bf866cf4664eb42c8dffccb7e5efabc3ee0000000000227cc983219164596ccf9fd4054da612cb10893950fa6225500146");

      builder = new Builder();
      addMulticallVote(
        builder, 
        [0, false, true], // number of unlockTokens, ifUpdateMax, ifUnlocksLastToken, !!!  ALWAYS UPDATES MAX
        [true, false], // if tokens depositde, if nfts deposited
        [0, true, true, false] // number of unlock tokens, if updates max, if tokenLocked, if nfts locked
      );
      expect(builder.getCalldata()).to.equal("0x045390620000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000a0000000000f754e17f810c6384c1c484aabad4d7a14fc374439a93c37dca740700000000003a88ece81a466da8aa7a551c9fecd77a1b760fae8141ab87619bc90000000000b662ab00c6c22024ad34f0b81f698b827278908550e6b0fae33589000000000024f8023d33c436933a53243e0064cc563d442540bfa4d00534e4c40000000000333e4d8ac7d4f17ee5978515b0cc244d6c987e9200f425e4588da600000000002f36e4b84afd534e36a3148e648178861d975953c79af7b02146310000000000011438026f9dc6066d0a6e720820ed890c6a689d179f71e278129c0000000000c5da01936ecd2ac1c4e69f5d2660ecb4eaad85e9e36f709303b4ec00000000001134997cedb3484972c683c8a8c62a2b888caf0f655a2d19e30643000000000013fda9a3742ca25fed368844a4ef57869d295de292a2ce73494448");

      builder = new Builder();
      addMulticallVote(
        builder, 
        [], // number of unlockTokens, ifUpdateMax, ifUnlocksLastToken, !!!  ALWAYS UPDATES MAX
        [], // if tokens depositde, if nfts deposited
        [0, true, false, true] // number of unlock tokens, if updates max, if tokenLocked, if nfts locked
      );
      expect(builder.getCalldata()).to.equal("0x04539062000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000050000000000d96bb5e035054be4d19e92ad7b099f210d5b4b03a04337e515ac4c00000000003b0bb3c536536373c12c89e278fb621d8fe3e7ed947361d609684c0000000000e0d7e895ebce2434bae5441bb9215739a9d95794ee9ba05406a19400000000000b05c48ffa5da3cdb5618d1f770073cc2ead08a543b915a32a73be00000000003b3261652af55f85ed7defe759e524bfa0d9531e1256fab2879ef5");

      builder = new Builder();
      addMulticallVote(
        builder, 
        [0, false, true], // number of unlockTokens, ifUpdateMax, ifUnlocksLastToken, !!!  ALWAYS UPDATES MAX
        [], // if tokens depositde, if nfts deposited
        [0, true, true, true] // number of unlock tokens, if updates max, if tokenLocked, if nfts locked
      );
      expect(builder.getCalldata()).to.equal("0x04539062000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000090000000000f754e17f810c6384c1c484aabad4d7a14fc374439a93c37dca740700000000003a88ece81a466da8aa7a551c9fecd77a1b760fae8141ab87619bc90000000000b662ab00c6c22024ad34f0b81f698b827278908550e6b0fae33589000000000095ad9962111d57a63a032bac3afed9d2ae7984c1707f7179f4813400000000007e959526e1c85437dc17c93025cfae0f586c5bd82b742b54d392170000000000ca1f8fb672fbb3db8075f459236887b7613a1694593819ceb1d0b400000000003c0bc700f90cd2159f8397cec4628cb03947a03a14ea830af851c500000000008c5e650a616ebb068c189f2734920900eed5adc41bb67678d34432000000000024714c9180e6d4c3e70f7f1dace8ba14172e20ae2e09e66fc98826");

      builder = new Builder();
      addMulticallVote(
        builder, 
        [], // number of unlockTokens, ifUpdateMax, ifUnlocksLastToken, !!!  ALWAYS UPDATES MAX
        [], // if tokens depositde, if nfts deposited
        [5, true, true, false] // number of unlock tokens, if updates max, if tokenLocked, if nfts locked
      );
      expect(builder.getCalldata()).to.equal("0x045390620000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000a0000000000eac551ded6900963a9d23df844f4d1971c2ec26faaf71b4dadba580000000000656742b88d5b0da691a53c1c26248aaae0a7c8b77c0d3cc4990a4b00000000000970bdeda4fae2db10ac7988aa60086ced38d7b13eaf7ba763d50000000000001517be611d73e14c74ffe1e06a5dac0527b561f5be83807521a94a00000000000a67b87a1bdbd5727a39119ad60b2e6bcd7171de445e443253fadc0000000000b1fa8a9b6264ce2425e3094344bdd4cf368e40da8304e83d6e273b0000000000b12af466e0b3091df2d991c751a3247c90c5f6f253f7f6fb97e6000000000000b3c6ef5236c810fd8940bf2ae74f3d20d5bd088ff4086fa004330d0000000000a551b2d40e9d010a462947f3c7d2186e09619725c766cc85bc55070000000000f3bd91ab89b87e948e22c282598f1c782754e267b4afb42312c4ee");

      builder = new Builder();
      addMulticallVote(
        builder, 
        [], // number of unlockTokens, ifUpdateMax, ifUnlocksLastToken, !!!  ALWAYS UPDATES MAX
        [], // if tokens depositde, if nfts deposited
        [3, true, true, false] // number of unlock tokens, if updates max, if tokenLocked, if nfts locked
      );
      expect(builder.getCalldata()).to.equal("0x04539062000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000080000000000eac551ded6900963a9d23df844f4d1971c2ec26faaf71b4dadba580000000000656742b88d5b0da691a53c1c26248aaae0a7c8b77c0d3cc4990a4b00000000000970bdeda4fae2db10ac7988aa60086ced38d7b13eaf7ba763d50000000000003ca8dcd7c5d4e6e725bff7bde0bd83f3b31c82e1cc2206f50649ef00000000005c100c5de346f69a31a8c9a15d819b2a55ede971980a4714a239ff000000000051dd1a32ae2e901eaaf49953a30dddb30e4d623250328470d2c44c0000000000709829752b26f3c4c389e5dbff249ea2a84620f64ed1a88e33781a0000000000d1fe9a7d7d8a1e3d2c8f4f7433375c2494476d33177185ceb3a902");

      builder = new Builder();
      addMulticallVote(
        builder, 
        [], // number of unlockTokens, ifUpdateMax, ifUnlocksLastToken, !!!  ALWAYS UPDATES MAX
        [true, false], // if tokens depositde, if nfts deposited
        [0, false, true, false] // number of unlock tokens, if updates max, if tokenLocked, if nfts locked
      );
      expect(builder.getCalldata()).to.equal("0x04539062000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000060000000000b9db5f9b4617f949c3b593fba8e48fc74840fcb53b6839e00bf3a2000000000026d78eeca71471f1509c680b84945b9ae69d239cad8da2a0568e0f0000000000c0f5c715215b4aa11e16e5261d0540c42e840c325f131a9e5d61d40000000000053e7d2f0cf19e1a7c2b45dc3f01cc2accbb7b72eb8a2cc8e4781a0000000000344a25a5a696340291ac5a3c7a4ae90e976a23ca52a6520c3e62fd000000000043dee3012973e96e727d0ae9ea818ddaa7dfe996bfb1352a53d316");

      builder = new Builder();
      addMulticallVote(
        builder, 
        [], // number of unlockTokens, ifUpdateMax, ifUnlocksLastToken, !!!  ALWAYS UPDATES MAX
        [], // if tokens depositde, if nfts deposited
        [1, false, true, false] // number of unlock tokens, if updates max, if tokenLocked, if nfts locked
      );
      expect(builder.getCalldata()).to.equal("0x04539062000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000050000000000eac551ded6900963a9d23df844f4d1971c2ec26faaf71b4dadba58000000000013319b83a4540e3f3028476664dc5a11bf98bbd1fe0fb66f35cfdb0000000000136fb0ef4121a85c7189f387dcc18626666ac39733b82f22ddddfa000000000047e3f5ab709afd11688183617056b43a1c5c26d750a5616cfd349a000000000080e7cce6470bf7d6933d26540966eaa4b5147c5d3c4b36da194135");

      builder = new Builder();
      addMulticallVote(
        builder, 
        [0, false, true], // number of unlockTokens, ifUpdateMax, ifUnlocksLastToken, !!!  ALWAYS UPDATES MAX
        [], // if tokens depositde, if nfts deposited
        [0, true, true, false] // number of unlock tokens, if updates max, if tokenLocked, if nfts locked
      );
      expect(builder.getCalldata()).to.equal("0x04539062000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000080000000000f754e17f810c6384c1c484aabad4d7a14fc374439a93c37dca740700000000003a88ece81a466da8aa7a551c9fecd77a1b760fae8141ab87619bc90000000000b662ab00c6c22024ad34f0b81f698b827278908550e6b0fae33589000000000095ad9962111d57a63a032bac3afed9d2ae7984c1707f7179f4813400000000007e959526e1c85437dc17c93025cfae0f586c5bd82b742b54d392170000000000ca1f8fb672fbb3db8075f459236887b7613a1694593819ceb1d0b40000000000dbc7d0171f72544b6d8796c5a8ee715e914c22505de8785e951c2d0000000000d50f8f02f258f685ef24345fe0cde9a15d4cd9e6724f0b0561cfea");

      builder = new Builder();
      addMulticallVote(
        builder, 
        [], // number of unlockTokens, ifUpdateMax, ifUnlocksLastToken, !!!  ALWAYS UPDATES MAX
        [], // if tokens depositde, if nfts deposited
        [1, true, false, false] // number of unlock tokens, if updates max, if tokenLocked, if nfts locked
      );
      expect(builder.getCalldata()).to.equal("0x04539062000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000050000000000eac551ded6900963a9d23df844f4d1971c2ec26faaf71b4dadba580000000000c340a1227b0294d35fdf15c3e193663b02b4b4e37e647112ad327e000000000034a2d37271e556d25f4af4e82d795a1946a5fdc905b2e69a6b4445000000000031ae5b2478d9a0692c3dede89083c55f12c6018e149d5112a6665f0000000000f9debb496f526677059d3961772acedce7797b12323ef57e761e31");

      builder = new Builder();
      addMulticallVote(
        builder, 
        [0, false, true], // number of unlockTokens, ifUpdateMax, ifUnlocksLastToken, !!!  ALWAYS UPDATES MAX
        [], // if tokens depositde, if nfts deposited
        [0, false, true, false] // number of unlock tokens, if updates max, if tokenLocked, if nfts locked
      );
      expect(builder.getCalldata()).to.equal("0x04539062000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000070000000000f754e17f810c6384c1c484aabad4d7a14fc374439a93c37dca740700000000003a88ece81a466da8aa7a551c9fecd77a1b760fae8141ab87619bc90000000000b662ab00c6c22024ad34f0b81f698b827278908550e6b0fae335890000000000b7d01a87555dafe126bfb5acfb3bc7f4bd028bb9041c099a89e7a30000000000fc4d882cc599a0a1637cfea5d283c7fdb34db3a7b6a96d43eaef94000000000042b9126d0902eca20057056aa90c50350387a62c1b2466d7c791fd000000000075bbf380cc3717b2f94c2bdefbfdcaa2c8c9d3680c803489661195");

      builder = new Builder();
      addMulticallVote(
        builder, 
        [], // number of unlockTokens, ifUpdateMax, ifUnlocksLastToken, !!!  ALWAYS UPDATES MAX
        [], // if tokens depositde, if nfts deposited
        [2, false, true, false] // number of unlock tokens, if updates max, if tokenLocked, if nfts locked
      );
      expect(builder.getCalldata()).to.equal("0x04539062000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000060000000000eac551ded6900963a9d23df844f4d1971c2ec26faaf71b4dadba580000000000656742b88d5b0da691a53c1c26248aaae0a7c8b77c0d3cc4990a4b00000000000cce30f427a3dc72c4c86ab21418263158ca70e81ef09b36929e8a000000000071748e7f4cfa8dfc28bd5ff463b6d0db42d19655417be52b0d57de0000000000895d647473ac69307b973b402fbf0cf5b1e64fbef0e00d53ac8dff00000000000fb3aad0f6b7576f3c9088ea94b090b264b1cb3961a3b5381fffa6");

      builder = new Builder();
      addMulticallVote(
        builder, 
        [], // number of unlockTokens, ifUpdateMax, ifUnlocksLastToken, !!!  ALWAYS UPDATES MAX
        [], // if tokens depositde, if nfts deposited
        [4, true, true, false] // number of unlock tokens, if updates max, if tokenLocked, if nfts locked
      );
      expect(builder.getCalldata()).to.equal("0x04539062000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000090000000000eac551ded6900963a9d23df844f4d1971c2ec26faaf71b4dadba580000000000656742b88d5b0da691a53c1c26248aaae0a7c8b77c0d3cc4990a4b00000000000970bdeda4fae2db10ac7988aa60086ced38d7b13eaf7ba763d50000000000001517be611d73e14c74ffe1e06a5dac0527b561f5be83807521a94a0000000000d5788d69d6e3cfe25f7dd386fe45087a5c9d03582fcc8d3c392ecb0000000000cdad60f733ef830d10ab0d8995d55910cf65bcc371420c5b286de100000000004e5407a3fd80cff528abcc5729205ba5e882e97d1e312e017d0ac200000000006cdb6745e24bb830fd5a95b4fb67723a1c6888f5370b944c63d9250000000000e0ee2605bdcb76ec3412760130f714d91d2f68a10427eb350d97d5");

      builder = new Builder();
      addMulticallVote(
        builder, 
        [false, false, true], // number of unlockTokens, ifUpdateMax, ifUnlocksLastToken, !!!  ALWAYS UPDATES MAX
        [true, false], // if tokens depositde, if nfts deposited
        [0, false, true, false] // number of unlock tokens, if updates max, if tokenLocked, if nfts locked
      );
      expect(builder.getCalldata()).to.equal("0x04539062000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000090000000000f754e17f810c6384c1c484aabad4d7a14fc374439a93c37dca740700000000003a88ece81a466da8aa7a551c9fecd77a1b760fae8141ab87619bc90000000000b662ab00c6c22024ad34f0b81f698b827278908550e6b0fae33589000000000024f8023d33c436933a53243e0064cc563d442540bfa4d00534e4c40000000000333e4d8ac7d4f17ee5978515b0cc244d6c987e9200f425e4588da6000000000018c0fb23fbbbc286de4fe26e2de067dd2e163bb21560b8c10b2ba70000000000857f00a3029afd57872d041e90650a708494e79bb3d0c0ef8f12a50000000000aabb9df81c1f94f3b9b85fba20e461793a1421d3b3da889886347100000000000978c90239209e27cd896bbf17b945ccc1a6ffbc0f1f0939298736");

      builder = new Builder();
      addMulticallVote(
        builder, 
        [1, true, true], // number of unlockTokens, ifUpdateMax, ifUnlocksLastToken, !!!  ALWAYS UPDATES MAX
        [], // if tokens depositde, if nfts deposited
        [0, false, true, false] // number of unlock tokens, if updates max, if tokenLocked, if nfts locked
      );
      expect(builder.getCalldata()).to.equal("0x04539062000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000090000000000f754e17f810c6384c1c484aabad4d7a14fc374439a93c37dca740700000000003a88ece81a466da8aa7a551c9fecd77a1b760fae8141ab87619bc9000000000043ae123d9154f943c065cb7ceb4196b267cc67c775919d45d068d00000000000434e7499c69a29276117148984bec2955acd761952c1f285cbc0c60000000000668a04d23e66d3d90904454194301ef20cc7c0a33ad8c1fde854800000000000de5fd389dc415fd50b0e5188985dca2e85db198e4a23e688629b1800000000006c25bb2b5d8c872ba596a6697543283cf1d67a3a33e4b8051b9ab9000000000099c6d6689acfaee821f1ad048c677d81c882a4f3b5a3258f1b09f800000000000b5b9af872f892a30f7c7b2b8c18337cce5a5dfcb8d9e90de2afc9");

      builder = new Builder();
      addMulticallVote(
        builder, 
        [1, true, true], // number of unlockTokens, ifUpdateMax, ifUnlocksLastToken, !!!  ALWAYS UPDATES MAX
        [], // if tokens depositde, if nfts deposited
        [0, true, true, false] // number of unlock tokens, if updates max, if tokenLocked, if nfts locked
      );
      expect(builder.getCalldata()).to.equal("0x045390620000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000a0000000000f754e17f810c6384c1c484aabad4d7a14fc374439a93c37dca740700000000003a88ece81a466da8aa7a551c9fecd77a1b760fae8141ab87619bc9000000000043ae123d9154f943c065cb7ceb4196b267cc67c775919d45d068d00000000000434e7499c69a29276117148984bec2955acd761952c1f285cbc0c60000000000668a04d23e66d3d90904454194301ef20cc7c0a33ad8c1fde854800000000000e01da221102b06ef7284065faf5163e412d1c88cf9da825fa5c0fa00000000006c0a3d7ba1cfa4b215cce8dff8084e60d13e6f03ebfd9afe14469c0000000000831475c79452aa5cdaef039d7c958dd4b202a83da854e2518d9768000000000099d4a97f1885e03b5d930cb1b7cfc209d459ac9c1577203e698ad00000000000d9444d2f9dcd9e4d08749a00cea82b8bc8533ed32da2c7520a66e1");
    });

    it("Add Withdraw", async () => {
      let builder = new Builder();
      const {addWithdraw} = require("../scripts/patterns/schemes");
      
      addWithdraw(builder, 1, true, true, false);
      expect(builder.getCalldata()).to.equal("0x045390620000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000400000000001beaa12b112ad7273f4fad0563d02a592077c5d1b0321e2cd17c4a0000000000cc4f96fb7ae10446662787abb8d81ae51d836e89e406120dd24a1600000000001e230ef997ded2829d5aca4aa4c6af9182b23fcf2ee8c3355bde200000000000a705944023e1858ffa14d314c3efe280274411aac9b71db2c20e2c");

      builder = new Builder();
      addWithdraw(builder, 0, true, true, false);
      expect(builder.getCalldata()).to.equal("0x04539062000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000030000000000eba34e54bc46e93b1d6d94b21aaa33451fefd75b909df427b2e19c0000000000f932ba65786f56c52db6654f4cc0ede6c7b871ba9c257eba854d5d000000000031f7c23ff27c5c768ed392c422fea3c14bf02c2bbbaaf77d07324a");

      builder = new Builder();
      addWithdraw(builder, 0, false, true, false);
      expect(builder.getCalldata()).to.equal("0x0453906200000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000096c8c7eab6455b8510c4fe7c43c585cdf0a4c6d5227cdaf5dc0d2000000000003023cf1b2a42523ba6a82ea9279eba9f8cea7d26fddfc4de4a155c");

      builder = new Builder();
      addWithdraw(builder, 1, false, true, false);
      expect(builder.getCalldata()).to.equal("0x045390620000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000300000000001beaa12b112ad7273f4fad0563d02a592077c5d1b0321e2cd17c4a0000000000a4990c54ac7fc065800bcc3b48a9ef02140cbc3f965098b3027f7000000000007882ac6000b49366235e9979b784fd0bf4d22c5a539675310bde05");

      builder = new Builder();
      addWithdraw(builder, 3, true, true, false);
      expect(builder.getCalldata()).to.equal("0x045390620000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000600000000001beaa12b112ad7273f4fad0563d02a592077c5d1b0321e2cd17c4a000000000053d6de97341e9469b921364d023569fde0ab75910a5847896e624300000000004ffa6732aa46645d17411bc7455d66bce0d7f7b93e884716a4d77f0000000000bf7b90679a8f9a4e739bd6b8914cb699e0e969813b5157e42d1d8300000000008c71e2eba1d498db0cbc5eeea5d853aa82fac9dc4860321e5932dc00000000005aa257f99054e1c2ca58a9de7f2b11748a12e628dc7cfe9931f12e");
    });

    it("Add Execute Withdraw", async () => {
      let builder = new Builder();
      const {addExecuteWithdraw} = require("../scripts/patterns/schemes");
      
      addExecuteWithdraw(builder, 1, true, true, false);
      expect(builder.getCalldata()).to.equal("0x04539062000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000050000000000393b312dc3a0f9e883432fd72f0844858de80eb7b05ee7571c3c8800000000005ed0159d752769be76104c036c8c0144a4798fb4e0b5fd9e60a1300000000000ed0344ccdcb01a1b4baa9a5bc903963406429a1b27b8072d8c305e0000000000746edcd92430d752338c44c8b7d9202a0f280f515f1a9fe369e4480000000000cde10bd1566bd5968262bc2b26b7515387805512d91c519ffe3bbe");

    });

    it("Add Modify Multiplier Nft", async () => {
      let builder = new Builder();
      const {addModifyMultiplierNfts} = require("../scripts/patterns/schemes");
      
      addModifyMultiplierNfts(builder, 1, 0);
      expect(builder.getCalldata()).to.equal("0x0453906200000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000064f8954f6d0ec70b98772b4bea3e3e7057dd4bf20ad9d0ae50a161000000000043181ec787881a28872026dcd4c23c1de7898fdd41c9a366aa0b4b00000000005611060799a13f628e97829c54e5d12922373c4f32d971c84578a7");
    });

    it("Add Create Proposal and Vote", async () => {
      let builder = new Builder();
      const {addCreateProposalAndVote} = require("../scripts/patterns/schemes");
      
      addCreateProposalAndVote(builder, 1, true, true, false);
      expect(builder.getCalldata()).to.equal("0x04539062000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000050000000000a6601d1ad90fabf8d0aee647eca5b70f5096af7bdbdedeca9ee3b2000000000099e5cfbf91d1725dcdb969ba947941b6c63fe75ac6e921f85e74450000000000b98cdf52d1a504d92053743bbc029280da2250a22b9d99781fc0f400000000005ebb21057d3086fe2a8705ec782e8a15af02e9ba6037e0495157550000000000999197fd3fe2aef2c2083eb852dfbdcb754a1f566fd6c44061e61b");
    });

    it("Add Execute Proposal Creation", async () => {
      let builder = new Builder();
      const {addExecuteProposalCreation} = require("../scripts/patterns/schemes");

      addExecuteProposalCreation(builder, false, true, false, 0, true, true, false);
      expect(builder.getCalldata()).to.equal("0x045390620000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000700000000007d524156339646681322cfac7875f999b655b3ed4aaae9fee00ead0000000000da109b2bf922a139bd47382dee6ca14c5ee6dfb6414b67f727d47f000000000033d7b5dc54b1421c4072dccb830a92f997b9193e5957960e02a95f00000000001e73c0fd0afaf218566269ffd01c707f2f8af36d88c79cbe68a14d000000000015a3342d48beffb1f9095c7ff861da4257e123b8662a964a7523640000000000c10bcfa7815e50d2e40c18abfd88f0ceaa9cdc86a47fa7344acd40000000000001c4d961070920c0f81823e5a8889e29dbcb41c528d3cccc03f4f2");

      builder = new Builder();
      addExecuteProposalCreation(builder, false, true, false, 1, true, true, false);
      expect(builder.getCalldata()).to.equal("0x045390620000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000800000000007d524156339646681322cfac7875f999b655b3ed4aaae9fee00ead0000000000da109b2bf922a139bd47382dee6ca14c5ee6dfb6414b67f727d47f0000000000d44512395fbe32a4668004f4766acb04dc89f71dc659ff3fdf715f0000000000e1b329927b46faf472f34a3b0dc980e0432067c7958ae3170a4dd30000000000c12de53ed2ee3bf754636237334d8f040f8379dd4e3bb8486336ef0000000000512319f2792f6d72ff3abc10a0c42dc3db6795d0212ca11845fbf00000000000ac7b9e1c98c3bc6d02cb5ed94f05c380b497adde97c4cc66133e860000000000656f348803936247ac86b2bc95748d5aac438bebf86de478b7d657");

      builder = new Builder();
      addExecuteProposalCreation(builder, false, false, false, 1, true, true, false);
      expect(builder.getCalldata()).to.equal("0x04539062000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000060000000000de439d6a887d60d25215feea6a1cb5c096840b386a9340319df49d00000000002f9a3f2f3f196a46432ff8c65ce0d82960ad4be76cb0e263e9477800000000009eb652b6e9bad01c18dc852532c500770b4387a83543fc776dc08b00000000001d9a08a1a09e53dd5ce336fa55913c949f7b74e90fb02fac4e511800000000005700953a0e1c572604aaf250e32e537dfc35c3dfc42d476723a2db000000000001e21c1e435c87da0a97a05cc49d65d7c504dc8b09fe6fa5d2fc4f");

      builder = new Builder();
      addExecuteProposalCreation(builder, true, false, false, 0, true, false, false);
      expect(builder.getCalldata()).to.equal("0x04539062000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000050000000000153270cc7db1f30be2ad8d3ffc9578b26f04931643873dc437f7ef000000000048ecc325f56c86b0e1a24ffdd7a8b046df2215f7bf58c0fa3c8b390000000000cd8383d42a90f2d96543e45f4ffa6aa159ab9a5cc595c86e1effdc000000000029c84a80c80c1058ca5df95af908e6e66355543e973343e3462a3200000000008cab66ca962b9754a56b8f204b232e783ab686fe56b25fb070e505");

      builder = new Builder();
      addExecuteProposalCreation(builder, false, false, false, 0, true, false, false);
      expect(builder.getCalldata()).to.equal("0x04539062000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000040000000000af8cd354dd6f48aff2d5383e1d36777eb3c6fa784b32ab7ae1b17600000000000cdf7bf0f23d1fd078a492aa989148d2b2c64a3e32b553effc0998000000000004acaff67d962d72079489f79ba99b75efb00cab49af01efd2274200000000006b73af775541991cf517587e10a9c19104936ca30ff3447194c2f9");

      builder = new Builder();
      addExecuteProposalCreation(builder, true, true, false, 0, true, true, false);
      expect(builder.getCalldata()).to.equal("0x04539062000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000080000000000153270cc7db1f30be2ad8d3ffc9578b26f04931643873dc437f7ef0000000000851e46f07938d0b3772c68bb26adc96753533d1beed684f52834ca000000000099e988952a76f2ef2bdcb5613161d95be6dd434b503ccad26635bf00000000008d42dae64470d6c46ad2440d932af60cd18d5842141cfd8fb069900000000000499e22c975206dbded9143305949226e19c10aaa92507ac09c7ab2000000000082d1a406436a30631a5bf96300a88e79d259bdb7296696a50b4948000000000011116cba35f015c98952275f3da98c408ead50da8dc6207f40ec36000000000065ecedc2b5a58cd492c121722a39f76793b22318b427988a1eb872");
    });

    it("Add Execute Cancel Vote", async () => {
      let builder = new Builder();
      const {addExecuteCancelVote} = require("../scripts/patterns/schemes");
      
      addExecuteCancelVote(builder, 0, false, true);
      expect(builder.getCalldata()).to.equal("0x04539062000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000040000000000855eb5c4d5dbc9ff47e998ca617212c5e326fd785d0eaed6cd323d00000000006c9ddf4f1c59b9dd52df8fc432e3bdad7f509e0bc292e69ee7ee0b0000000000946489a103092c5cc5837d6a2d528bbd6b009411a4b5b4bf11f9a10000000000fb869b963d157ffb4dc3ceb0007670aee40ea3cb31073e1a93363f");
    });

    it("Add Execute Vote", async () => {
      let builder = new Builder();
      const {addExecuteVote} = require("../scripts/patterns/schemes");
      
      addExecuteVote(builder, 0, false, false, true, true, false);
      expect(builder.getCalldata()).to.equal("0x04539062000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000050000000000d500a1411702fbfb76dfede626b34acb7e8928facbcc01a3671ff20000000000f67aabce2e74d73a8d7e3addafcad9fcc65ae96b9378225de78439000000000030527938a3455bce4658edb98a3d00c61a3f11d44ffa1eb8c880b8000000000083221e1170212c93902abcfc15c83a4a07372dbcbd0b753b908be5000000000078c65d072cdb5a917a4e95ee3e1194e4a1416168a301ee3f258f54");

      builder = new Builder();
      addExecuteVote(builder, 0, false, false, true, false, false);
      expect(builder.getCalldata()).to.equal("0x04539062000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000040000000000d500a1411702fbfb76dfede626b34acb7e8928facbcc01a3671ff20000000000f67aabce2e74d73a8d7e3addafcad9fcc65ae96b9378225de7843900000000006bf9472860de90e12c442b3bd90755969f093534d08932bdfb69450000000000bbdc6a77bb9a73fe0d5aacdcbaffae984b7d7a1cb1fe5a6e117a77");

      builder = new Builder();
      addExecuteVote(builder, 0, true, false, true, true, false);
      expect(builder.getCalldata()).to.equal("0x045390620000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000700000000007d524156339646681322cfac7875f999b655b3ed4aaae9fee00ead0000000000da109b2bf922a139bd47382dee6ca14c5ee6dfb6414b67f727d47f00000000002a5434c39cf7951b2df9022fb32577058c1e4f583a459086fe1d7500000000009c16bae9b695b1342c9f52e45ca0132c6bdf76997d37b44488551f0000000000e60a8119add30a0c688dcb00442306883face6fe46f2d5ec68cd4e00000000006259f3c27d191d9330d6128c3ecbb0ad8e30718eed35fbe487de060000000000124de75015b3437550d072ba2c0110c48fa0d3ccbc7be726bff2a3");
    });

  });

  describe("Batch patterns", function () {
    it("Batch delegate", async () => {
      let builder = new Builder();
      const {addDelegate, addDelegateBatch} = require("../scripts/patterns/schemes");
      addDelegateBatch(builder, 3, 2);
      let patterns = builder.getPatterns();

      let b = new Builder();
      addDelegate(b, 0, 0, false, false, false, false);
      let p = b.getPatterns()
      let lastPattern = p[p.length - 1];
      expect(patterns.indexOf(lastPattern)).to.not.equal(-1);

      b = new Builder();
      addDelegate(b, 3, 2, true, true, true, true);
      p = b.getPatterns()
      lastPattern = p[p.length - 1];
      expect(patterns.indexOf(lastPattern)).to.equal(patterns.length - 1);
    });

    it("Batch whitelist", async () => {
      let builder = new Builder();
      const {addWhiteList, addWhiteListBatch} = require("../scripts/patterns/schemes");
      addWhiteListBatch(builder, 5);
      let patterns = builder.getPatterns();

      let b = new Builder();
      addWhiteList(b, 0, false);
      let p = b.getPatterns()
      let lastPattern = p[p.length - 1];
      expect(patterns.indexOf(lastPattern)).to.not.equal(-1);

      b = new Builder();
      addWhiteList(b, 5, true);
      p = b.getPatterns()
      lastPattern = p[p.length - 1];
      expect(patterns.indexOf(lastPattern)).to.equal(patterns.length - 1);
    });

    it("Batch CreteMultiplierNft", async () => {
      let builder = new Builder();
      const {addModifyMultiplierNfts, addModifyMultiplierNftsBatch} = require("../scripts/patterns/schemes");
      addModifyMultiplierNftsBatch(builder, 0, 5);
      let patterns = builder.getPatterns();

      let b = new Builder();
      addModifyMultiplierNfts(b, 0, 0, false);
      let p = b.getPatterns()
      let lastPattern = p[p.length - 1];
      expect(patterns.indexOf(lastPattern)).to.not.equal(-1);

      b = new Builder();
      addModifyMultiplierNfts(b, 0, 5, true);
      p = b.getPatterns()
      lastPattern = p[p.length - 1];
      expect(patterns.indexOf(lastPattern)).to.equal(patterns.length - 1);
    });

    it("Batch MulticallVote", async () => {
      let builder = new Builder();
      const {addMulticallVoteBatch, addMulticallVote} = require("../scripts/patterns/schemes");
      addMulticallVoteBatch(builder, 5);
      let patterns = builder.getPatterns();

      let b
      let workingPatterns = 
        [
          [[], [], [1, true, true, false]],
          [[], [], [0, true, false, false]],
          [[], [], [0, false, true, false]],
          [[], [], [2, true, true, false]],
          [[], [true, false], [1, true, true, false]],
          [[0, false, true], [], [0, true, true, false]],
          [[0, false, true], [true, false], [0, true, true, false]],
          [[], [], [5, true, true, false]],
          [[], [], [3, true, true, false]],
          [[], [true, false], [0, false, true, false]],
          [[], [], [1, false, true, false]],
          [[0, false, true], [], [0, true, true, false]],
          [[], [], [1, true, false, false]],
          [[0, false, true], [], [0, false, true, false]],
          [[], [], [2, false, true, false]],
          [[], [], [4, true, true, false]],
          [[false, false, true], [true, false], [0, false, true, false]],
          [[1, true, true], [], [0, false, true, false]],
          [[1, true, true], [], [0, true, true, false]]
        ];
      for (workingPattern of workingPatterns) {
        b = new Builder();
        addMulticallVote(
          b, 
          workingPattern[0],
          workingPattern[1],
          workingPattern[2],
        );
        let testPatterns = b.getPatterns()
        for (testPattern of testPatterns) {
          expect(patterns.indexOf(testPattern)).to.not.equal(-1);
        }  
      }
    });

    it("Batch Withdraw", async () => {
      let builder = new Builder();
      const {addWithdraw, addExecuteWithdraw, addWithdrawBatch} = require("../scripts/patterns/schemes");
      addWithdrawBatch(builder, 10);
      let patterns = builder.getPatterns();

      let b
      let workingPatterns = 
        [
          [0, true, true, false, false],
          [1, true, true, false, false],
          [0, false, true, false, false],
          [1, false, true, false, false],
          [3, true, true, false, false]
        ];
      for (workingPattern of workingPatterns) {
        b = new Builder();
        addWithdraw(
          b, 
          workingPattern[0],
          workingPattern[1],
          workingPattern[2],
          workingPattern[3]
        );
        let testPatterns = b.getPatterns()
        for (testPattern of testPatterns) {
          expect(patterns.indexOf(testPattern)).to.not.equal(-1);
        }  
      }

      b = new Builder();
      addWithdraw(b, 0, false, true, false, false);
      let p = b.getPatterns()
      let lastPattern = p[p.length - 1];
      expect(patterns.indexOf(lastPattern)).to.not.equal(-1);

      b = new Builder();
      addWithdraw(b, 10, true, true, true, true);
      p = b.getPatterns()
      lastPattern = p[p.length - 1];
      expect(patterns.indexOf(lastPattern)).to.not.equal(-1);

      b = new Builder();
      addExecuteWithdraw(b, 0, false, true, false, false);
      p = b.getPatterns()
      lastPattern = p[p.length - 1];
      expect(patterns.indexOf(lastPattern)).to.not.equal(-1);

      b = new Builder();
      addExecuteWithdraw(b, 10, true, true, true, true);
      p = b.getPatterns()
      lastPattern = p[p.length - 1];
      expect(patterns.indexOf(lastPattern)).to.equal(patterns.length - 1);

    });

    it("Batch Modify Multiplier", async () => {
      let builder = new Builder();
      const {addModifyMultiplierNftsBatch, addModifyMultiplierNfts} = require("../scripts/patterns/schemes");
      addModifyMultiplierNftsBatch(builder, 10, 10);
      let patterns = builder.getPatterns();

      let b = new Builder();
      addModifyMultiplierNfts(b, 1, 0, false);
      p = b.getPatterns()
      lastPattern = p[p.length - 1];
      expect(patterns.indexOf(lastPattern)).to.not.equal(-1);

      b = new Builder();
      addModifyMultiplierNfts(b, 10, 10, true);
      p = b.getPatterns()
      lastPattern = p[p.length - 1];
      expect(patterns.indexOf(lastPattern)).to.equal(patterns.length - 1);
    });

    it("Batch Create Proposal and Vote", async () => {
      let builder = new Builder();
      const {addCreateProposalAndVoteBatch, addCreateProposalAndVote} = require("../scripts/patterns/schemes");
      addCreateProposalAndVoteBatch(builder, 5);
      let patterns = builder.getPatterns();

      let b = new Builder();
      addCreateProposalAndVote(b, 0, false, false, false);
      p = b.getPatterns()
      lastPattern = p[p.length - 1];
      expect(patterns.indexOf(lastPattern)).to.not.equal(-1);

      b = new Builder();
      addCreateProposalAndVote(b, 5, true, true, true);
      p = b.getPatterns()
      lastPattern = p[p.length - 1];
      expect(patterns.indexOf(lastPattern)).to.equal(patterns.length - 1);
    });

    it("Batch Add Execute Proposal Creation", async () => {
      let builder = new Builder();
      const {addExecuteProposalCreation, addExecuteProposalCreationBatch} = require("../scripts/patterns/schemes");
      addExecuteProposalCreationBatch(builder, 5);
      let patterns = builder.getPatterns();

      let b = new Builder();
      addExecuteProposalCreation(b, false, false, false, 0, false, false, false);
      p = b.getPatterns()
      lastPattern = p[p.length - 1];
      expect(patterns.indexOf(lastPattern)).to.not.equal(-1);

      b = new Builder();
      addExecuteProposalCreation(b, true, true, true, 5, true, true, true);
      p = b.getPatterns()
      lastPattern = p[p.length - 1];
      expect(patterns.indexOf(lastPattern)).to.equal(patterns.length - 1);
    });

    it("Batch Execute Vote", async () => {
      let builder = new Builder();
      const {addExecuteVote, addExecuteVoteBatch} = require("../scripts/patterns/schemes");
      addExecuteVoteBatch(builder, 3);
      let patterns = builder.getPatterns();

      let b = new Builder();
      addExecuteVote(b, 0, false, false, false, false, false);
      p = b.getPatterns()
      lastPattern = p[p.length - 1];
      expect(patterns.indexOf(lastPattern)).to.not.equal(-1);

      b = new Builder();
      addExecuteVote(b, 3, true, true, true, true, true);
      p = b.getPatterns()
      lastPattern = p[p.length - 1];
      expect(patterns.indexOf(lastPattern)).to.equal(patterns.length - 1);
    });

    it("Batch Execute Cancel Vote", async () => {
      let builder = new Builder();
      const {addExecuteCancelVote, addExecuteCancelVoteBatch} = require("../scripts/patterns/schemes");
      addExecuteCancelVoteBatch(builder, 3);
      let patterns = builder.getPatterns();

      let b = new Builder();
      addExecuteCancelVote(b, 0, false, false);
      p = b.getPatterns()
      lastPattern = p[p.length - 1];
      expect(patterns.indexOf(lastPattern)).to.not.equal(-1);

      b = new Builder();
      addExecuteCancelVote(b, 3, true, true);
      p = b.getPatterns()
      lastPattern = p[p.length - 1];
      expect(patterns.indexOf(lastPattern)).to.not.equal(-1);
    });

    it("Batch set initializators", async () => {
      let builder = new Builder();
      const {addInitPatternsBatch} = require("../scripts/patterns/schemes");
      addInitPatternsBatch(builder);
      let patterns = builder.getPatterns();

      let containedPattern = "0x6b8312772b6e594304afc3d99036a8bd89277cbf8217899f1eeb07"
      expect(patterns.indexOf(containedPattern)).to.not.equal(-1);

      containedPattern = "0x16233a68365e6acd45ac9f016460683d56605a83740aa094caffa5"
      expect(patterns.indexOf(containedPattern)).to.not.equal(-1);

      containedPattern = "0xb1577c506f85a1d92391589e6a1a36d08473b617c362dccdbd0e99"
      expect(patterns.indexOf(containedPattern)).to.not.equal(-1);

      containedPattern = "0x67e9ecdbbe2b2415b72c31be9e9f4450a9686e320ac498c28ed0df"
      expect(patterns.indexOf(containedPattern)).to.not.equal(-1);

      containedPattern = "0x280c20d63266f46325e0d5123c23a693c417dd1fac2d0cf44122f4"
      expect(patterns.indexOf(containedPattern)).to.not.equal(-1);

      containedPattern = "0x2089e90c126bec94148bee75c94b913e23b80ac9c53cef754f4156"
      expect(patterns.indexOf(containedPattern)).to.not.equal(-1);

      containedPattern = "0x019847308b2fbddd8325df0a52a4d30be3a2eacb9ed23bca301e14"
      expect(patterns.indexOf(containedPattern)).to.not.equal(-1);

      containedPattern = "0x7f9c23eca6b7f5e7d800b43c028eef4b65e937e28ba6f9a529971a"
      expect(patterns.indexOf(containedPattern)).to.not.equal(-1);

      containedPattern = "0xb1bd1c059706d15ec700030ac0f25fae0942c16492081c66fd52ed"
      expect(patterns.indexOf(containedPattern)).to.not.equal(-1);

      containedPattern = "0x0e9abcae1ce4ab9171d5172185ca94f9b4584b21f9b58c68b48270"
      expect(patterns.indexOf(containedPattern)).to.not.equal(-1);
    });

    it("Batch set oneliners", async () => {
      let builder = new Builder();
      const {addOneLinersBatch} = require("../scripts/patterns/schemes");
      addOneLinersBatch(builder);
      let patterns = builder.getPatterns();

      let containedPattern = "0x4cc0629c38729839e551735afa36aad1c6a30937af00d450588623"
      expect(patterns.indexOf(containedPattern)).to.not.equal(-1);

      containedPattern = "0x9cc5e77d970f225c73181d2fff00e3a1887bedd9c1045e5613ad32"
      expect(patterns.indexOf(containedPattern)).to.not.equal(-1);

      containedPattern = "0xe4089bee34459b667c1ed00d2c8e027db6f19e4e0da1be39df8f97"
      expect(patterns.indexOf(containedPattern)).to.not.equal(-1);

      containedPattern = "0xe8b737fbb81d84ba2e77e6ae19836b5f1c3bc5b0deecf3d215673e"
      expect(patterns.indexOf(containedPattern)).to.not.equal(-1);

      containedPattern = "0x61a20cb99cd1330347129c2ef962149c97c4eca2274c258f2de097"
      expect(patterns.indexOf(containedPattern)).to.not.equal(-1);

      containedPattern = "0xb0a68bea049da2fbf4f66dd1531c6efd1b3b404515fd17b599d744"
      expect(patterns.indexOf(containedPattern)).to.not.equal(-1);

      containedPattern = "0xf0f49d9428d568314bf517a266e40d2dfca4a75d94b35ae933b409"
      expect(patterns.indexOf(containedPattern)).to.not.equal(-1);

      containedPattern = "0x9c53b72d21048807ddf9986584790552364be99aa44353b8b1a99e"
      expect(patterns.indexOf(containedPattern)).to.not.equal(-1);

      containedPattern = "0xd9625c6f70bbf512f0db2d579ccfaa5f0425740698c755f82428e2"
      expect(patterns.indexOf(containedPattern)).to.not.equal(-1);

      containedPattern = "0x0041127f3c02608f6c8b06890f17274d94cd37f1ad61479a095fac"
      expect(patterns.indexOf(containedPattern)).to.not.equal(-1);

      containedPattern = "0xf51261ba3bf21289c707deab0ed4fd1fc8b3907b07d810db846af7"
      expect(patterns.indexOf(containedPattern)).to.not.equal(-1);

      containedPattern = "0x9f6279ad514e43f50eec45d6699b057357faafe3f360a5cba50bce"
      expect(patterns.indexOf(containedPattern)).to.not.equal(-1);

      containedPattern = "0xccfc95e40effc9711a7791ca5c33133835e13baf33d3e6213b3478"
      expect(patterns.indexOf(containedPattern)).to.not.equal(-1);

      containedPattern = "0x61ba2b8fd034e981a9736eb587de8998b2bf9cb3fb987c62d6a1cb"
      expect(patterns.indexOf(containedPattern)).to.not.equal(-1);
    });

    it("Batch set short executes", async () => {
      let builder = new Builder();
      const {addShortExecutesBatch} = require("../scripts/patterns/schemes");
      addShortExecutesBatch(builder);
      let patterns = builder.getPatterns();

      let containedPattern = "0x063ec4ef7d76300b1b94f6b94a41aa7746f168c6824d621816980e"
      expect(patterns.indexOf(containedPattern)).to.not.equal(-1);

      containedPattern = "0xb209bebeb955721a81005761df153dcfe1163ff2f8dae15b25356c"
      expect(patterns.indexOf(containedPattern)).to.not.equal(-1);

      containedPattern = "0x1b9da5346e96aa5664650ae433e7cc0bf3acfaa3a15749fef2dbfe"
      expect(patterns.indexOf(containedPattern)).to.not.equal(-1);

      containedPattern = "0xc0f5477a0d0627f455da7868ec4ddb6a0b9f016b73856bff3065f3"
      expect(patterns.indexOf(containedPattern)).to.not.equal(-1);

      containedPattern = "0x469d5fac15c04dc9a5ccbda24d11caf28b96b316da9ad2157676ee"
      expect(patterns.indexOf(containedPattern)).to.not.equal(-1);

      containedPattern = "0x5a8cc17b485ca6488fcf30f474319e98c6939cf22a15f3dadf8856"
      expect(patterns.indexOf(containedPattern)).to.not.equal(-1);

      containedPattern = "0x7775fe8a4201199613a14d745d069c834a2f588b397909bbc2a51e"
      expect(patterns.indexOf(containedPattern)).to.not.equal(-1);

      containedPattern = "0x00010ccf58b6126b2881d1f2adf0b75a7590eaad6b6e5f0a9930b4"
      expect(patterns.indexOf(containedPattern)).to.not.equal(-1);

      containedPattern = "0x0a5b01a0987c29a1af193686619deb14e1b053a9a5c1924a7861ce"
      expect(patterns.indexOf(containedPattern)).to.not.equal(-1);

      containedPattern = "0x31efc9fc07976d2cef6ec573e62a5394f9714cd729b26a5e63b649"
      expect(patterns.indexOf(containedPattern)).to.not.equal(-1);

      containedPattern = "0x20bded31adb9d92c4dd0abdebf3987ecac3642b5d8289b4c11ed9e"
      expect(patterns.indexOf(containedPattern)).to.not.equal(-1);

      containedPattern = "0x572895432429905e859da058c7ed8b439d3948d217d84651432fe8"
      expect(patterns.indexOf(containedPattern)).to.not.equal(-1);

      containedPattern = "0xd06de51e04d748d45721664848570cb300b9a7f55e3d904b9f9f75"
      expect(patterns.indexOf(containedPattern)).to.not.equal(-1);

      containedPattern = "0xd83608b6e6983cc1ea992392c835ba05920ea7fc2a39271770aeac"
      expect(patterns.indexOf(containedPattern)).to.not.equal(-1);

      containedPattern = "0x96b9fe3fc9b2438771548b532efa467e3b81a3cb86878ad8a350e4"
      expect(patterns.indexOf(containedPattern)).to.not.equal(-1);

      containedPattern = "0xc1293d091f9b4879ee3076b11aa292b781bd61ece023b30abe34c2"
      expect(patterns.indexOf(containedPattern)).to.not.equal(-1);

    });
  });

  describe("Batch compare function result with predefined string", function () {
    it("Compare batch whitelist", async () => {
      let builder = new Builder();
      const {addWhiteListBatch} = require("../scripts/patterns/schemes");
      addWhiteListBatch(builder, 5);
      let calldata = builder.getCalldata();
      expect(calldata).to.equal("0x04539062000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000230000000000cf56c8cff78b00ca7795d4f97c2a351ecedf3cc52e1df77cd5a3750000000000945d04e81eddbfaaaf23bf26e0c4251cf4cf4ec11ce8617132a33d0000000000153270cc7db1f30be2ad8d3ffc9578b26f04931643873dc437f7ef0000000000c1f53d499e0a453a49336f1a2f534fdd88fc67d9b72efb0a46d08b000000000004f877bfe1643146c85d913e8ef85381d12ed25b7742b99cfbffa90000000000b1e14e7db6391733d3007d0b1397090d66f518acbc74aa35025a87000000000084f3f57613bf3ded0af136455cf693aaa1bc02d96b11e00509d3eb0000000000d3fd4c540f2928e12205c1c35f1353eabe5cce9c9f3a155c3fec7b000000000017702179bcda4ff411f929e18f10d3f05c839796727d53d1b56f1e00000000004b4bb5b57c465e71a7be4a522d904bbf3a06b723997aa5a18920410000000000d6154220b20bd85de1eee036f158461373c31a9a9861262f1f8a2c000000000067242584cc60ee0ea419a0421fa1bb7945af7d4c0cda8bdaeeb9eb00000000004562cded303b39c38101723101f0fb5c9e3c23f22c25ff1cc25aac00000000000c74f0083a14bf9f12cad036b227051f2d23e47618276dfe1c5d510000000000092c21165d4825b5ec1dfb4753e86a9b43c359309ab19f94ebf4be00000000009f793d532b970bb55a030b78834783e0b8d5bd2e295f8d37fe028300000000004f7f79d534585ace63981ef12053a26ad99dba3e267a4c4ecedf820000000000bedd056d603d9fae0cec922d169572fe1d78e2f1337f2d89f2b3380000000000df783885fa005ee5cb4f82f91d5d78c4ca40c79b7c293df300f6eb000000000057037a770be5c13525e59c3e73e62a60b17fb2455c1a8dd0ea979100000000007773cbab6e0b2f6c2055361a5457684d9f96a94912056a5c47b1f40000000000d50a0510cbe3e20506797002d684c5cf51acc94e6dc1d3051a28f70000000000db4095d2a7b80e988aacceac392343bd2b064c7eca307165e7ea3700000000001b5598f3cd30899edfe31a52dc8a08c39417602b6414d84285ab140000000000becf68435a120ca1e1e3adc098165e55851958319bddbf60bda0d90000000000767cfe2d3afdae8a570c13c28e6f500547fa73dcd36f5c0aeeae840000000000749610b6f0634f781faee437e09d629443ba30df0040bfe79bbb97000000000021fe9e0c4584c87a634b43a1dd3c853015f3d0bfe2b456b0c95c52000000000068f2dfa24f3ad1a237b5e0fd7fc16060783d4c5a59f695f97ed8b300000000007beccd1913bb2be985d67361f93c8f233e920d57a51b7422a47fd400000000001626152d5dab0e50fa1c05a446b186752e771d4c8a946b0598b52f0000000000042157d6b53e518acea390822f217f13c51c677b67b0b54fa35150000000000045e57011e553bc4c77a2df8de02c5044bffb20e47d8e78b5d7c76a0000000000d738f66ddee3979765c15acafbae2d32d0035222065e7b0c8bc4ac00000000007e73ae0a901514369f32233b723f9bbe3f78d7414f4bec53088f0a");      
    })

    it("Compare batch create proposal and vote", async () => {
      let builder = new Builder();
      const {addCreateProposalAndVoteBatch} = require("../scripts/patterns/schemes");
      addCreateProposalAndVoteBatch(builder, 2);
      let calldata = builder.getCalldata();
      expect(calldata).to.equal("0x04539062000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000350000000000b00bbd0ab5bfdcdab90dc9b1b08b8a4e7b0575cb4f55210a763d2d0000000000734c3c541f87e8f121f0d58a01e7f69a119b247fe517bcf49c2fc000000000000d9c28baf1ec4d817342b08612d286c0bc2b0ce4a58261a7a0de660000000000fefcb5157cf4381c43418667773855f6e97cd7905ffc39b65a472d0000000000133acff8fa340cdf02d3fe956ef29798dbfe47b31e528cf540cbb9000000000068111ffbfb0c80f8c44e89c5cd58a885a9c47920340a99550f67ac0000000000c8a747d16527660b5e6c8b83def27ca51d4a952d7664b240eb5dda000000000058fe3517f6a29a64167110425ac20ed5a07da1822e7711bea5001f00000000009a84d74511baf4e62d388928954b531cd31d56bcc979dc4df4716b0000000000dde7eae17979ba40b9e1f97a90f77cb46eeef4b7460b177a8d3f4100000000009af63237db6e386e673341ff05304f190eee032b4173fe0586d8f300000000001ca805f99f558016e4e8f14c3ad863173b13de11f8f27095d97c7d0000000000b185be4941b071c735dbc1d97ab26527b4db82b0a712731fdecbc70000000000aefadef9d86176ef6e0286bca300b70a5c9c7e269b2c62856e7e570000000000625dd871ca744e89c6f102deb7b2f7954f8a65958639c84b7850080000000000ff8c0331c7dfc17c78e40430dd84595e7f52c351558a459a8a0c98000000000069120c4db6b5c7b125f91ebe4552deb90d2a7a1012df84ca93c6880000000000a6601d1ad90fabf8d0aee647eca5b70f5096af7bdbdedeca9ee3b200000000009c353021892dec161a8de4162091d3f7fb047c4cc88fc137803505000000000025e094c2008c2a728bda8d0394957e09201c38e3d39d18298de06d000000000099e5cfbf91d1725dcdb969ba947941b6c63fe75ac6e921f85e74450000000000b98cdf52d1a504d92053743bbc029280da2250a22b9d99781fc0f40000000000886ee7987108491190829f4fe6012e4fc25c00b25f61f3bf420f1c0000000000a475ba81ecbe2f564ec8de12c5d7d0a8cdd46cc581848e54f5677c0000000000a21e3986ba6cdf65f8ca11db1b6800b8e9bf355277da581abfb0b800000000005ebb21057d3086fe2a8705ec782e8a15af02e9ba6037e0495157550000000000999197fd3fe2aef2c2083eb852dfbdcb754a1f566fd6c44061e61b0000000000c2e3265d3fd9f7449e0014a0bc7fd35b49e2215824240e2593bf170000000000f32ab58984a52374f93580b0014712301f241e74dad9a38e6ccc450000000000e8cbcbe307206be3c2d94fc8a4f8dd2b96eb03b9ba2581161e8b3f00000000000151f0454bb75e2c2fc98a29a45421358bce7bba7d602562fe965b0000000000e8c1914c06e1632d0a0e8acc00f2b7aeb75f7f5d1c41b7997d4975000000000017f7a084a5a43d673ab9f351c4df134fc3f9d7b5c83b3bb1835f3b00000000006a02b0b1ff266966043f115f44f5e3c887d643fa587e488a0878c70000000000b8c144b8a43919816387808513cf636308c2ef5f9a24f8697e7a2e0000000000182e78935d210cd42b8f7c1abd43fd78996d623fcc602d29f619590000000000fe58135fadc546e3851cff8cc2b9eaad78ffa734b55f601f72b6e1000000000036b890d73804ad22be80bf6efa397bb4c04a973a1f37cc86d5779d0000000000d59e13c8e7d12b7f37dfb5194ffe8d057f0dcad5772907e19e88f60000000000f5ca838063bd94a6e2f580405837955dc9a85fc21d3fb0c8d1046e0000000000fca948959899ca6922bd348d38587ea19599278a33a9176362ff2600000000004687575c274a70d6e276296c615d26a56728773d1c7a9c122dbdc00000000000729add2da60ee065fe8f2a3c37437230eb701c4b549933c7ca0b78000000000014d208ad5ff428ba8c559afb6651ee1abc1b01f21685e0620033dc0000000000a36f3fb5f72e82315eb22c379cd018cef6bd8b9915707aa9b35a5e00000000005625571cc3b3cd5ce41e55b9f836c48208d5212d6e81d0c510cf5700000000001ff8ebbaef6dbd302f782f33b902719229366e9eedf119a45e9e580000000000ce5bc25f7f332b919ac4a7e4abc72ae8e8de8515cc93a532b2ff1d0000000000531a4e57a7744d1f88d50dbc6d3d4297522b34a1991f0200ab2fe50000000000976d86c6a6f12719c22598e2b04cc777fb47d3a109642e6abc531f00000000004dd5c0bb66e99a4142d55b48917f2a8176e2d4db970edbe050cd5200000000007ffede7172d8267205846472ef1b699c70f5ddbed203fb1b0ae90800000000007f3866c882a0d524aec988a836db81ada1eef9638389584158b013");
    })

  });

});

